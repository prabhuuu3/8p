import numpy as np 
X = np.array(([2, 9], [1, 5], [3, 6]), dtype=float) 
y = np.array(([92], [86], [89]), dtype=float)  
X = X/np.amax(X,axis=0)     
y = y/100

def sigmoid (x): 
    return 1/(1 + np.exp(-x)) 


def derivatives_sigmoid(x): 
    return x * (1 - x) 


epoch=5000 
lr=0.1   
inputlayer_neurons = 2   
hiddenlayer_neurons = 3 
output_neurons = 1  

wh=np.random.uniform(size=(inputlayer_neurons,hiddenlayer_neurons))  

bh=np.random.uniform(size=(1,hiddenlayer_neurons))  
 
wout=np.random.uniform(size=(hiddenlayer_neurons,output_neurons))  

bout=np.random.uniform(size=(1,output_neurons))  
 
for i in range(epoch): 

    hinp1=np.dot(X,wh) 
    hinp=hinp1 + bh 
    hlayer_act = sigmoid(hinp) 
    outinp1=np.dot(hlayer_act,wout) 
    outinp= outinp1+ bout 
    output = sigmoid(outinp) 

    EO = y-output 
    outgrad = derivatives_sigmoid(output) 
    d_output = EO* outgrad 
    EH = d_output.dot(wout.T) 
 
    hiddengrad = derivatives_sigmoid(hlayer_act) 
    d_hiddenlayer = EH * hiddengrad 
 
    wout += hlayer_act.T.dot(d_output) *lr 
    wh += X.T.dot(d_hiddenlayer) *lr 
 
print("Input: \n" + str(X))  
print("Actual Output: \n" + str(y)) 
print("Predicted Output: \n" ,output) 






































import pandas as pd 
 
data = pd.read_csv('enjoysport.csv') 
concepts = data.iloc[:, :-1].values 
target = data.iloc[:, -1].values 
n=len(concepts[0])-1 
specific_h = ['0'] * n  
general_h = ['?'] * n 
print("The initialization of the specific and general hypothesis ") 
print(" S0:",specific_h,"\n G0:",general_h) 
 
def learn(concepts, target): 
    specific_h = concepts[0].copy() 
    general_h = [["?" for _ in range(len(specific_h))] for _ in range(len(specific_h))] 
    for i, h in enumerate(concepts): 
        if target[i] == "yes": 
            print(f"\n the {i+1} training instance is Positive \n",concepts[i]) 
            for x in range(len(specific_h)): 
                if h[x] != specific_h[x]: 
                    specific_h[x] = '?' 
                    general_h[x][x] = '?' 
        else: 
            print(f"\nThe {i+1} training instance is Negative \n",concepts[i]) 
            for x in range(len(specific_h)): 
                if h[x] != specific_h[x]: 
                    general_h[x][x] = specific_h[x] 
                else: 
                    general_h[x][x] = '?' 
 
        print(f"S{i+1}:\n", specific_h) 
        print(f"G{i+1}:\n", general_h) 
 
    general_h = [h for h in general_h if h != ['?' for _ in range(len(specific_h))]] 
    return specific_h, general_h 
 
s_final, g_final = learn(concepts, target) 
print("\nThe Final Specific Hypothesis:") 
print(s_final) 
print("\nThe Final General Hypothesis:") 
print(g_final)
